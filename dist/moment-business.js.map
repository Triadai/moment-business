{"version":3,"sources":["moment-business.js"],"names":[],"mappings":"AAAA,AAAC,CAAA,UAAU,QAAQ,SAAS;AAC1B,SAAO,YAAY,YAAY,OAAO,WAAW,cAAc,QAAQ,QAAQ,WAAW,QAAQ,gCAClG,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,CAAC,UAAU,8BAA8B,WAC7F,QAAQ,OAAO,QAAQ,OAAO;GAC9B,MAAM,UAAU,QAAQ,yBAAyB;AAAE;;AAEnD,SAAO,GAAG,WAAW,UAAS,OAAO;AACnC,QAAI,WAAW,MAAM;AACrB,QAAI,YAAY,KAAK,IAAI,KAAK,KAAK,OAAO;AAC1C,QAAI,mBAAmB,wBAAwB,UAAU,YAAY,UAAU,GAAG;AAClF,QAAI,qBAAqB,wBAAwB,UAAU,YAAY,UAAU,GAAG;AACpF,WAAO,aAAa,qBAAqB;;;AAG3C,SAAO,GAAG,cAAc,UAAS,OAAO;AACtC,WAAO,KAAK,IAAI,KAAK,KAAK,OAAO,WAAW,KAAK,SAAS;;;AAG5D,WAAS,aAAa,GAAG;AACvB,QAAI,CAAC;AACL,QAAI,MAAM,KAAK,MAAM,IAAI;AACvB,aAAO;;AAET,WAAO,IAAI,IAAI,IAAI,CAAC;;;AAGtB,SAAO,GAAG,cAAc,UAAS,OAAO;AACtC,QAAI,UAAU,GAAG;AAAE,aAAO;;;AAE1B,QAAI,OAAO,aAAa;AACxB,QAAI,MAAM,KAAK;AACf,QAAI,eAAe,KAAK,IAAI;;AAE5B,QAAI,OAAO;;AAEX,QAAI,QAAQ,KAAK,SAAS,CAAC,GAAG;AAC5B,aAAO;WACF,IAAI,QAAQ,KAAK,SAAS,GAAG;AAClC,aAAO;;;;AAIT,QAAI,qBAAqB;AACzB,QAAI,QAAQ,KAAK,QAAQ,KAAK,OAAO,GAAG;AACtC,4BAAsB;WACjB,IAAI,QAAQ,KAAK,QAAQ,KAAK,OAAO,GAAG;AAC7C,4BAAsB,IAAI;;AAE5B,QAAI,oBACF,KAAK,IAAI,KAAK,MAAM,qBAAqB,KAAK,GAAG,MAChD,qBAAqB,KAAK,qBAAqB,IAAI,IAAI,IAAI;;;AAG9D,YAAQ,eAAe,oBAAoB;;AAE3C,SAAK,IAAI,OAAO,MAAM;AACtB,WAAO;;;;AAIT,SAAO,GAAG,mBAAmB,UAAS,OAAO;AAC3C,WAAO,KAAK,YAAY,CAAC;;;;;AAK3B,SAAO,GAAG,YAAY,YAAW;AAC/B,WAAO,KAAK,eAAe;;;;AAI7B,SAAO,GAAG,eAAe,YAAW;AAClC,WAAO,KAAK,eAAe","file":"moment-business.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('moment'), require('contained-periodic-values')) :\n  typeof define === 'function' && define.amd ? define(['moment', 'contained-periodic-values'], factory) :\n  factory(global.moment, global.containedPeriodicValues)\n}(this, function (moment, containedPeriodicValues) { 'use strict';\n\n  moment.fn.weekDays = function(start) {\n    var startDay = start.day();\n    var totalDays = Math.abs(this.diff(start, 'days'));\n    var containedSundays = containedPeriodicValues(startDay, totalDays + startDay, 0, 7);\n    var containedSaturdays = containedPeriodicValues(startDay, totalDays + startDay, 6, 7);\n    return totalDays - (containedSaturdays + containedSundays);\n  };\n\n  moment.fn.weekendDays = function(start) {\n    return Math.abs(this.diff(start, 'days')) - this.weekDays(start);\n  };\n\n  function signPolyfill(x) {\n    x = +x;\n    if (x === 0 || isNaN(x)) {\n      return x;\n    }\n    return x > 0 ? 1 : -1;\n  }\n\n  moment.fn.addWorkDays = function(count) {\n    if (count === 0) { return this; }\n\n    var sign = signPolyfill(count);\n    var day = this.day();\n    var absIncrement = Math.abs(count);\n\n    var days = 0;\n\n    if (day === 0 && sign === -1) {\n      days = 1;\n    } else if (day === 6 && sign === 1) {\n      days = 1;\n    }\n\n    // Add padding for weekends.\n    var paddedAbsIncrement = absIncrement;\n    if (day !== 0 && day !== 6 && sign > 0) {\n      paddedAbsIncrement += day;\n    } else if (day !== 0 && day !== 6 && sign < 0) {\n      paddedAbsIncrement += 6 - day;\n    }\n    var weekendsInbetween =\n      Math.max(Math.floor(paddedAbsIncrement / 5) - 1, 0) +\n      (paddedAbsIncrement > 5 && paddedAbsIncrement % 5 > 0 ? 1 : 0);\n\n    // Add the increment and number of weekends.\n    days += absIncrement + weekendsInbetween * 2;\n\n    this.add(sign * days, 'days');\n    return this;\n  };\n\n  // The inverse of adding\n  moment.fn.subtractWorkDays = function(count) {\n    return this.addWorkDays(-count);\n  };\n\n  // Returns a Boolean representing\n  // whether or not the moment is Mon-Fri\n  moment.fn.isWorkDay = function() {\n    return this.isoWeekday() < 6;\n  };\n\n  // The inverse of the above method\n  moment.fn.isWeekendDay = function() {\n    return this.isoWeekday() > 5;\n  };\n\n}));\n"],"sourceRoot":"/source/"}